;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 18/05/2020 01:33:16
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x0000000403F0  	GOTO	_main
0x0004	0x000000  	0
0x0006	0x000000  	0
0x0008	0x000000  	0
0x000A	0x000000  	0
0x000C	0x000000  	0
0x000E	0x000000  	0
0x0010	0x000000  	0
0x0012	0x000000  	0
0x0014	0x000000  	0
0x0016	0x000000  	0
0x0018	0x000000  	0
0x001A	0x0002E6  	742
0x001C	0x000000  	0
0x001E	0x000000  	0
0x0020	0x000306  	774
0x0022	0x000000  	0
0x0024	0x000000  	0
0x0026	0x000324  	804
0x0028	0x000000  	0
0x002A	0x0004FE  	1278
0x002C	0x000000  	0
0x002E	0x000000  	0
0x0030	0x000000  	0
0x0032	0x000000  	0
0x0034	0x000000  	0
0x0036	0x000000  	0
0x0038	0x000000  	0
0x003A	0x000000  	0
0x003C	0x000000  	0
0x003E	0x00052E  	1326
0x0040	0x000000  	0
0x0042	0x000000  	0
0x0044	0x0003CC  	972
0x0046	0x000000  	0
0x0048	0x000000  	0
0x004A	0x000000  	0
0x004C	0x000000  	0
0x004E	0x000000  	0
0x0050	0x000000  	0
0x0052	0x000000  	0
0x0054	0x000000  	0
0x0056	0x000000  	0
0x0058	0x000000  	0
0x005A	0x000000  	0
0x005C	0x000000  	0
0x005E	0x000000  	0
0x0060	0x000000  	0
0x0062	0x000000  	0
0x0064	0x000000  	0
0x0066	0x000000  	0
0x0068	0x000000  	0
0x006A	0x000000  	0
0x006C	0x000000  	0
0x006E	0x000000  	0
0x0070	0x000000  	0
0x0072	0x000000  	0
0x0074	0x000000  	0
0x0076	0x000000  	0
0x0078	0x000000  	0
0x007A	0x000000  	0
0x007C	0x000000  	0
0x007E	0x000000  	0
0x0080	0x000000  	0
0x0082	0x000000  	0
0x0084	0x000000  	0
0x0086	0x000000  	0
0x0088	0x000000  	0
0x008A	0x000000  	0
0x008C	0x000000  	0
0x008E	0x000000  	0
0x0090	0x000000  	0
0x0092	0x000000  	0
0x0094	0x000000  	0
0x0096	0x000000  	0
0x0098	0x000000  	0
0x009A	0x000000  	0
0x009C	0x000000  	0
0x009E	0x000000  	0
0x00A0	0x000000  	0
0x00A2	0x000000  	0
0x00A4	0x000000  	0
0x00A6	0x000000  	0
0x00A8	0x000000  	0
0x00AA	0x000000  	0
0x00AC	0x000000  	0
0x00AE	0x000000  	0
0x00B0	0x000000  	0
0x00B2	0x000000  	0
0x00B4	0x000000  	0
0x00B6	0x000000  	0
0x00B8	0x000000  	0
0x00BA	0x000000  	0
0x00BC	0x000000  	0
0x00BE	0x000000  	0
0x00C0	0x000000  	0
0x00C2	0x000000  	0
0x00C4	0x000000  	0
0x00C6	0x000000  	0
0x00C8	0x000000  	0
0x00CA	0x000000  	0
0x00CC	0x000000  	0
0x00CE	0x000000  	0
0x00D0	0x000000  	0
0x00D2	0x000000  	0
0x00D4	0x000000  	0
0x00D6	0x000000  	0
0x00D8	0x000000  	0
0x00DA	0x000000  	0
0x00DC	0x000000  	0
0x00DE	0x000000  	0
0x00E0	0x000000  	0
0x00E2	0x000000  	0
0x00E4	0x000000  	0
0x00E6	0x000000  	0
0x00E8	0x000000  	0
0x00EA	0x000000  	0
0x00EC	0x000000  	0
0x00EE	0x000000  	0
0x00F0	0x000000  	0
0x00F2	0x000000  	0
0x00F4	0x000000  	0
0x00F6	0x000000  	0
0x00F8	0x000000  	0
0x00FA	0x000000  	0
0x00FC	0x000000  	0
0x00FE	0x000000  	0
_main:
0x03F0	0x20830F  	MOV	#2096, W15
0x03F2	0x20FFF0  	MOV	#4095, W0
0x03F4	0xB7A020  	MOV	WREG, SPLIM
0x03F6	0x200000  	MOV	#0, W0
0x03F8	0xB7A034  	MOV	WREG, PSVPAG
0x03FA	0x200040  	MOV	#4, W0
0x03FC	0xB72044  	IOR	CORCON
0x03FE	0xFA0002  	LNK	#2
0x0400	0x00000002056E  	CALL	1390
0x0404	0x000000020578  	CALL	1400
;SensorIrDA2020.c,26 :: 		void main() {
;SensorIrDA2020.c,30 :: 		TRISB   = 0xFFFF;                       // set pin as input - needed for ADC to work     */
0x0408	0x781F8A  	PUSH	W10
0x040A	0x781F8B  	PUSH	W11
0x040C	0x781F8C  	PUSH	W12
0x040E	0x2FFFF0  	MOV	#65535, W0
0x0410	0xB7A2C6  	MOV	WREG, TRISB
;SensorIrDA2020.c,31 :: 		ADCON1  = 0x00E2;                      // Auto-stop sampling, unsigned integer out
0x0412	0x200E20  	MOV	#226, W0
0x0414	0xB7A2A0  	MOV	WREG, ADCON1
;SensorIrDA2020.c,32 :: 		ADCON2  = 0x0000;
0x0416	0xEF22A2  	CLR	ADCON2
;SensorIrDA2020.c,33 :: 		ADCON3  = 0x1F3F;    //0x1F20;         // Sampling time= 3*Tad, minimum Tad selected  0x021A;
0x0418	0x21F3F0  	MOV	#7999, W0
0x041A	0xB7A2A4  	MOV	WREG, ADCON3
;SensorIrDA2020.c,34 :: 		ADPCFG  = 0xFFFE;                      // Configure RB0 as ADC input port
0x041C	0x2FFFE0  	MOV	#65534, W0
0x041E	0xB7A2A8  	MOV	WREG, ADPCFG
;SensorIrDA2020.c,35 :: 		ADCHS   = 0x0000;                      // Sample input on RB0
0x0420	0xEF22A6  	CLR	ADCHS
;SensorIrDA2020.c,36 :: 		ADCSSL  = 0;                           // No input scan
0x0422	0xEF22AA  	CLR	ADCSSL
;SensorIrDA2020.c,40 :: 		IFS0    = 0;                            // Clear flags int.
0x0424	0xEF2084  	CLR	IFS0
;SensorIrDA2020.c,41 :: 		IFS1    = 0;
0x0426	0xEF2086  	CLR	IFS1
;SensorIrDA2020.c,42 :: 		IFS2    = 0;
0x0428	0xEF2088  	CLR	IFS2
;SensorIrDA2020.c,43 :: 		INTCON1 = 0x8000;                      // Nested interrupts DISABLED
0x042A	0x280000  	MOV	#32768, W0
0x042C	0xB7A080  	MOV	WREG, INTCON1
;SensorIrDA2020.c,44 :: 		INTCON2 = 0;
0x042E	0xEF2082  	CLR	INTCON2
;SensorIrDA2020.c,45 :: 		IEC0    = 0x0808;                      // Timer1 and ADC interrupts ENABLED
0x0430	0x208080  	MOV	#2056, W0
0x0432	0xB7A08C  	MOV	WREG, IEC0
;SensorIrDA2020.c,46 :: 		IPC0.F12= 1;                           // Timer1 interrupt priority level = 1
0x0434	0xA88095  	BSET	IPC0, #12
;SensorIrDA2020.c,47 :: 		IPC2.F13= 1;                           // ADC interrupt priority level = 2
0x0436	0xA8A099  	BSET	IPC2, #13
;SensorIrDA2020.c,51 :: 		PR1     = 0x4E20;                      // Sampling 0x4E20 = 1000Hz ---- 0x07D0 = 10000 Hz. Value of PR1 is dependent on clock.
0x0438	0x24E200  	MOV	#20000, W0
0x043A	0xB7A102  	MOV	WREG, PR1
;SensorIrDA2020.c,52 :: 		T1CON   = 0x8000;                      // Timer1 ON, internal clock FCY, prescaler 1:1
0x043C	0x280000  	MOV	#32768, W0
0x043E	0xB7A104  	MOV	WREG, T1CON
;SensorIrDA2020.c,54 :: 		T1IF_bit = 0;                          // Clear T1IF
0x0440	0xA96084  	BCLR	T1IF_bit, BitPos(T1IF_bit+0)
;SensorIrDA2020.c,55 :: 		T1IE_bit = 1;                        // Enable Timer1 interrupts
0x0442	0xA8608C  	BSET	T1IE_bit, BitPos(T1IE_bit+0)
;SensorIrDA2020.c,58 :: 		PR2     = 0x4C4B;
0x0444	0x24C4B0  	MOV	#19531, W0
0x0446	0xB7A10C  	MOV	WREG, PR2
;SensorIrDA2020.c,60 :: 		T2CON   = 0x8030;                      // Timer2 ON, internal clock FCY, prescaler 1:256
0x0448	0x280300  	MOV	#32816, W0
0x044A	0xB7A110  	MOV	WREG, T2CON
;SensorIrDA2020.c,62 :: 		T2IF_bit = 0;
0x044C	0xA9C084  	BCLR	T2IF_bit, BitPos(T2IF_bit+0)
;SensorIrDA2020.c,63 :: 		T2IE_bit = 1;
0x044E	0xA8C08C  	BSET	T2IE_bit, BitPos(T2IE_bit+0)
;SensorIrDA2020.c,69 :: 		PR4     = 0x4C4B;
0x0450	0x24C4B0  	MOV	#19531, W0
0x0452	0xB7A11A  	MOV	WREG, PR4
;SensorIrDA2020.c,70 :: 		T4CON   = 0x8030;                      // Timer4 ON, internal clock FCY, prescaler 1:256
0x0454	0x280300  	MOV	#32816, W0
0x0456	0xB7A11E  	MOV	WREG, T4CON
;SensorIrDA2020.c,71 :: 		T4IF_bit = 0;                          // Clear T4IF
0x0458	0xA9A086  	BCLR	T4IF_bit, BitPos(T4IF_bit+0)
;SensorIrDA2020.c,72 :: 		T4IE_bit = 0;                        // Enable Timer4 interrupts
0x045A	0xA9A08E  	BCLR	T4IE_bit, BitPos(T4IE_bit+0)
;SensorIrDA2020.c,76 :: 		TRISB=0B1110111000001001;
0x045C	0x2EE090  	MOV	#60937, W0
0x045E	0xB7A2C6  	MOV	WREG, TRISB
;SensorIrDA2020.c,77 :: 		TRISD=0B1111111111111000;
0x0460	0x2FFF80  	MOV	#65528, W0
0x0462	0xB7A2D2  	MOV	WREG, TRISD
;SensorIrDA2020.c,78 :: 		TRISA=0B1111111111111111;
0x0464	0x2FFFF0  	MOV	#65535, W0
0x0466	0xB7A2C0  	MOV	WREG, TRISA
;SensorIrDA2020.c,79 :: 		TRISF=0B1111111110010001;
0x0468	0x2FF910  	MOV	#65425, W0
0x046A	0xB7A2DE  	MOV	WREG, TRISF
;SensorIrDA2020.c,80 :: 		TRISC=0B1101111111111111;
0x046C	0x2DFFF0  	MOV	#57343, W0
0x046E	0xB7A2CC  	MOV	WREG, TRISC
;SensorIrDA2020.c,82 :: 		while (1){
L_main0:
;SensorIrDA2020.c,85 :: 		if (FrameCompletoUART1==1){
0x0470	0x208210  	MOV	#lo_addr(_FrameCompletoUART1), W0
0x0472	0x784010  	MOV.B	[W0], W0
0x0474	0xE10461  	CP.B	W0, #1
0x0476	0x3A003D  	BRA NZ	L_main2
L__main16:
;SensorIrDA2020.c,87 :: 		if (FrameIHM[1]=='z')  ADCTx=FrameIHM[13];
0x0478	0x208010  	MOV	#lo_addr(_FrameIHM+1), W0
0x047A	0x784090  	MOV.B	[W0], W1
0x047C	0xB3C7A0  	MOV.B	#122, W0
0x047E	0xE10C00  	CP.B	W1, W0
0x0480	0x3A0003  	BRA NZ	L_main3
L__main17:
0x0482	0x208231  	MOV	#lo_addr(_ADCTx), W1
0x0484	0x2080D0  	MOV	#lo_addr(_FrameIHM+13), W0
0x0486	0x784890  	MOV.B	[W0], [W1]
L_main3:
;SensorIrDA2020.c,88 :: 		if ((FrameIHM[1]>='A')&&(FrameIHM[1]<='y') ){
0x0488	0x208010  	MOV	#lo_addr(_FrameIHM+1), W0
0x048A	0x784090  	MOV.B	[W0], W1
0x048C	0xB3C410  	MOV.B	#65, W0
0x048E	0xE10C00  	CP.B	W1, W0
0x0490	0x390030  	BRA LTU	L__main14
L__main18:
0x0492	0x208010  	MOV	#lo_addr(_FrameIHM+1), W0
0x0494	0x784090  	MOV.B	[W0], W1
0x0496	0xB3C790  	MOV.B	#121, W0
0x0498	0xE10C00  	CP.B	W1, W0
0x049A	0x3E002B  	BRA GTU	L__main13
L__main19:
L__main12:
;SensorIrDA2020.c,90 :: 		FlagCommIHM=1;
0x049C	0x208221  	MOV	#lo_addr(_FlagCommIHM), W1
0x049E	0xB3C010  	MOV.B	#1, W0
0x04A0	0x784880  	MOV.B	W0, [W1]
;SensorIrDA2020.c,91 :: 		eeAddr=0x7FFC00+FrameIHM[1]*2;
0x04A2	0x208010  	MOV	#lo_addr(_FrameIHM+1), W0
0x04A4	0xFB8010  	ZE	[W0], W0
0x04A6	0xDD0041  	SL	W0, #1, W0
0x04A8	0x780180  	MOV	W0, W3
0x04AA	0xDE9A4F  	ASR	W3, #15, W4
0x04AC	0x2FC001  	MOV	#64512, W1
0x04AE	0x2007F2  	MOV	#127, W2
0x04B0	0x2082C0  	MOV	#lo_addr(_eeAddr), W0
0x04B2	0x409803  	ADD	W1, W3, [W0++]
0x04B4	0x491004  	ADDC	W2, W4, [W0--]
;SensorIrDA2020.c,92 :: 		for (i=1; i<=4;i++) strHex[i] = FrameIHM[9+i];
0x04B6	0x200010  	MOV	#1, W0
0x04B8	0x980700  	MOV	W0, [W14+0]
L_main7:
0x04BA	0x90000E  	MOV	[W14+0], W0
0x04BC	0xE10064  	CP	W0, #4
0x04BE	0x3E000C  	BRA GTU	L_main8
L__main20:
0x04C0	0x208261  	MOV	#lo_addr(_strHex), W1
0x04C2	0x470060  	ADD	W14, #0, W0
0x04C4	0x408110  	ADD	W1, [W0], W2
0x04C6	0x90000E  	MOV	[W14+0], W0
0x04C8	0x4000E9  	ADD	W0, #9, W1
0x04CA	0x208000  	MOV	#lo_addr(_FrameIHM), W0
0x04CC	0x400001  	ADD	W0, W1, W0
0x04CE	0x784910  	MOV.B	[W0], [W2]
0x04D0	0x200011  	MOV	#1, W1
0x04D2	0x470060  	ADD	W14, #0, W0
0x04D4	0x408810  	ADD	W1, [W0], [W0]
0x04D6	0x37FFF1  	BRA	L_main7
L_main8:
;SensorIrDA2020.c,93 :: 		eeData = xtoi(strHex);
0x04D8	0x20826A  	MOV	#lo_addr(_strHex), W10
0x04DA	0x07FE97  	RCALL	_xtoi
0x04DC	0x884120  	MOV	W0, _eedata
;SensorIrDA2020.c,94 :: 		FlagCommIHM=0;
0x04DE	0x208222  	MOV	#lo_addr(_FlagCommIHM), W2
0x04E0	0xEF2002  	CLR	W1
0x04E2	0x784901  	MOV.B	W1, [W2]
;SensorIrDA2020.c,96 :: 		EEPROM_Write(eeAddr, eeData);
0x04E4	0x780600  	MOV	W0, W12
0x04E6	0x80416A  	MOV	_eeAddr, W10
0x04E8	0x80417B  	MOV	_eeAddr+2, W11
0x04EA	0x07FEDE  	RCALL	_EEPROM_Write
;SensorIrDA2020.c,97 :: 		while(WR_bit);
L_main10:
0x04EC	0xAEE761  	BTSS	WR_bit, BitPos(WR_bit+0)
0x04EE	0x370001  	BRA	L_main11
0x04F0	0x37FFFD  	BRA	L_main10
L_main11:
;SensorIrDA2020.c,88 :: 		if ((FrameIHM[1]>='A')&&(FrameIHM[1]<='y') ){
L__main14:
L__main13:
;SensorIrDA2020.c,99 :: 		}
L_main2:
;SensorIrDA2020.c,100 :: 		}
0x04F2	0x37FFBE  	BRA	L_main0
;SensorIrDA2020.c,101 :: 		}//~!
L_end_main:
0x04F4	0x78064F  	POP	W12
0x04F6	0x7805CF  	POP	W11
0x04F8	0x78054F  	POP	W10
0x04FA	0xFA8000  	ULNK
L__main_end_loop:
0x04FC	0x37FFFF  	BRA	L__main_end_loop
; end of _main
_xtoi:
0x020A	0xFA0002  	LNK	#2
;__Lib_CStdlib.c,316 :: 		
;__Lib_CStdlib.c,320 :: 		
; sign start address is: 6 (W3)
0x020C	0xEF2006  	CLR	W3
;__Lib_CStdlib.c,321 :: 		
; val start address is: 4 (W2)
0x020E	0xEF2004  	CLR	W2
; val end address is: 4 (W2)
; sign end address is: 6 (W3)
;__Lib_CStdlib.c,322 :: 		
L_xtoi73:
; val start address is: 4 (W2)
; sign start address is: 6 (W3)
0x0210	0x781F8A  	PUSH	W10
0x0212	0x78451A  	MOV.B	[W10], W10
0x0214	0x07FFB9  	RCALL	_isspace
0x0216	0x78054F  	POP	W10
0x0218	0xE20000  	CP0	W0
0x021A	0x320003  	BRA Z	L_xtoi74
L__xtoi162:
;__Lib_CStdlib.c,323 :: 		
0x021C	0x450061  	ADD	W10, #1, W0
0x021E	0x780500  	MOV	W0, W10
0x0220	0x37FFF7  	BRA	L_xtoi73
L_xtoi74:
;__Lib_CStdlib.c,324 :: 		
0x0222	0x78409A  	MOV.B	[W10], W1
0x0224	0xB3C2D0  	MOV.B	#45, W0
0x0226	0xE10C00  	CP.B	W1, W0
0x0228	0x3A0005  	BRA NZ	L_xtoi75
L__xtoi163:
;__Lib_CStdlib.c,326 :: 		
; sign start address is: 2 (W1)
0x022A	0x4180E1  	ADD	W3, #1, W1
; sign end address is: 6 (W3)
;__Lib_CStdlib.c,327 :: 		
0x022C	0x450061  	ADD	W10, #1, W0
0x022E	0x780500  	MOV	W0, W10
;__Lib_CStdlib.c,328 :: 		
0x0230	0x780181  	MOV	W1, W3
; sign end address is: 2 (W1)
0x0232	0x370006  	BRA	L_xtoi76
L_xtoi75:
;__Lib_CStdlib.c,330 :: 		
; sign start address is: 6 (W3)
0x0234	0x78409A  	MOV.B	[W10], W1
0x0236	0xB3C2B0  	MOV.B	#43, W0
0x0238	0xE10C00  	CP.B	W1, W0
0x023A	0x3A0002  	BRA NZ	L_xtoi77
L__xtoi164:
;__Lib_CStdlib.c,331 :: 		
0x023C	0x450061  	ADD	W10, #1, W0
0x023E	0x780500  	MOV	W0, W10
L_xtoi77:
L_xtoi76:
; sign end address is: 6 (W3)
;__Lib_CStdlib.c,332 :: 		
; sign start address is: 6 (W3)
0x0240	0x780202  	MOV	W2, W4
; val end address is: 4 (W2)
; sign end address is: 6 (W3)
L_xtoi78:
; sign start address is: 6 (W3)
; val start address is: 8 (W4)
0x0242	0x78008A  	MOV	W10, W1
0x0244	0x450061  	ADD	W10, #1, W0
0x0246	0x780500  	MOV	W0, W10
0x0248	0x784011  	MOV.B	[W1], W0
0x024A	0xFB8000  	ZE	W0, W0
0x024C	0x980700  	MOV	W0, [W14+0]
0x024E	0x781F8A  	PUSH	W10
0x0250	0x90450E  	MOV.B	[W14+0], W10
0x0252	0x07FFAA  	RCALL	_isxdigit
0x0254	0x78054F  	POP	W10
0x0256	0xE20000  	CP0	W0
0x0258	0x320020  	BRA Z	L_xtoi79
L__xtoi165:
;__Lib_CStdlib.c,333 :: 		
0x025A	0x781F8A  	PUSH	W10
0x025C	0x90450E  	MOV.B	[W14+0], W10
0x025E	0x07FF87  	RCALL	_isupper
0x0260	0x78054F  	POP	W10
0x0262	0xE20000  	CP0	W0
0x0264	0x320006  	BRA Z	L_xtoi80
L__xtoi166:
;__Lib_CStdlib.c,334 :: 		
0x0266	0x781F8A  	PUSH	W10
0x0268	0x90450E  	MOV.B	[W14+0], W10
0x026A	0x07FF6C  	RCALL	_tolower
0x026C	0x78054F  	POP	W10
0x026E	0xFB8000  	ZE	W0, W0
0x0270	0x980700  	MOV	W0, [W14+0]
L_xtoi80:
;__Lib_CStdlib.c,335 :: 		
0x0272	0x781F8A  	PUSH	W10
0x0274	0x90450E  	MOV.B	[W14+0], W10
0x0276	0x07FF4F  	RCALL	_isdigit
0x0278	0x78054F  	POP	W10
0x027A	0xE20000  	CP0	W0
0x027C	0x320005  	BRA Z	L_xtoi81
L__xtoi167:
;__Lib_CStdlib.c,336 :: 		
0x027E	0x200302  	MOV	#48, W2
0x0280	0x4700E0  	ADD	W14, #0, W1
0x0282	0x470060  	ADD	W14, #0, W0
0x0284	0x110811  	SUBR	W2, [W1], [W0]
0x0286	0x370004  	BRA	L_xtoi82
L_xtoi81:
;__Lib_CStdlib.c,338 :: 		
0x0288	0x90010E  	MOV	[W14+0], W2
0x028A	0x200571  	MOV	#87, W1
0x028C	0x470060  	ADD	W14, #0, W0
0x028E	0x510801  	SUB	W2, W1, [W0]
L_xtoi82:
;__Lib_CStdlib.c,339 :: 		
0x0290	0xDD20C4  	SL	W4, #4, W1
; val end address is: 8 (W4)
;__Lib_CStdlib.c,340 :: 		
0x0292	0x90400E  	MOV.B	[W14+0], W0
0x0294	0xFB8000  	ZE	W0, W0
; val start address is: 8 (W4)
0x0296	0x408200  	ADD	W1, W0, W4
;__Lib_CStdlib.c,341 :: 		
0x0298	0x37FFD4  	BRA	L_xtoi78
L_xtoi79:
;__Lib_CStdlib.c,342 :: 		
0x029A	0xE20006  	CP0	W3
0x029C	0x320002  	BRA Z	L_xtoi83
L__xtoi168:
; sign end address is: 6 (W3)
;__Lib_CStdlib.c,343 :: 		
0x029E	0x120060  	SUBR	W4, #0, W0
; val end address is: 8 (W4)
0x02A0	0x370001  	BRA	L_end_xtoi
L_xtoi83:
;__Lib_CStdlib.c,344 :: 		
; val start address is: 8 (W4)
0x02A2	0x780004  	MOV	W4, W0
; val end address is: 8 (W4)
;__Lib_CStdlib.c,345 :: 		
L_end_xtoi:
0x02A4	0xFA8000  	ULNK
0x02A6	0x060000  	RETURN
; end of _xtoi
_isspace:
0x0188	0xFA0000  	LNK	#0
;__Lib_CType.c,35 :: 		
;__Lib_CType.c,36 :: 		
0x018A	0xB3C200  	MOV.B	#32, W0
0x018C	0xE15400  	CP.B	W10, W0
0x018E	0x320007  	BRA Z	L_isspace15
L__isspace65:
0x0190	0xE1546D  	CP.B	W10, #13
0x0192	0x3E0003  	BRA GTU	L__isspace38
L__isspace66:
0x0194	0xE15469  	CP.B	W10, #9
0x0196	0x390001  	BRA LTU	L__isspace37
L__isspace67:
0x0198	0x370002  	BRA	L_isspace15
L__isspace38:
L__isspace37:
0x019A	0xEF2002  	CLR	W1
0x019C	0x370002  	BRA	L_isspace14
L_isspace15:
0x019E	0xB3C010  	MOV.B	#1, W0
0x01A0	0x784080  	MOV.B	W0, W1
L_isspace14:
0x01A2	0xFB8001  	ZE	W1, W0
;__Lib_CType.c,37 :: 		
L_end_isspace:
0x01A4	0xFA8000  	ULNK
0x01A6	0x060000  	RETURN
; end of _isspace
_isxdigit:
0x01A8	0xFA0000  	LNK	#0
;__Lib_CType.c,58 :: 		
;__Lib_CType.c,61 :: 		
0x01AA	0xB3C660  	MOV.B	#102, W0
0x01AC	0xE15400  	CP.B	W10, W0
0x01AE	0x3E0005  	BRA GTU	L_isxdigit27
L__isxdigit83:
0x01B0	0xB3C610  	MOV.B	#97, W0
0x01B2	0xE15400  	CP.B	W10, W0
0x01B4	0x390002  	BRA LTU	L_isxdigit27
L__isxdigit84:
0x01B6	0xB3C010  	MOV.B	#1, W0
0x01B8	0x370001  	BRA	L_isxdigit26
L_isxdigit27:
0x01BA	0xEF2000  	CLR	W0
L_isxdigit26:
; rslt start address is: 2 (W1)
0x01BC	0x784080  	MOV.B	W0, W1
;__Lib_CType.c,62 :: 		
0x01BE	0xB3C460  	MOV.B	#70, W0
0x01C0	0xE15400  	CP.B	W10, W0
0x01C2	0x3E0005  	BRA GTU	L_isxdigit29
L__isxdigit85:
0x01C4	0xB3C410  	MOV.B	#65, W0
0x01C6	0xE15400  	CP.B	W10, W0
0x01C8	0x390002  	BRA LTU	L_isxdigit29
L__isxdigit86:
0x01CA	0xB3C010  	MOV.B	#1, W0
0x01CC	0x370001  	BRA	L_isxdigit28
L_isxdigit29:
0x01CE	0xEF2000  	CLR	W0
L_isxdigit28:
; rslt start address is: 4 (W2)
0x01D0	0x70C100  	IOR.B	W1, W0, W2
; rslt end address is: 2 (W1)
;__Lib_CType.c,63 :: 		
0x01D2	0x07FFA1  	RCALL	_isdigit
0x01D4	0xFB8082  	ZE	W2, W1
; rslt end address is: 4 (W2)
0x01D6	0x708000  	IOR	W1, W0, W0
;__Lib_CType.c,65 :: 		
0x01D8	0xFB8000  	ZE	W0, W0
;__Lib_CType.c,66 :: 		
L_end_isxdigit:
0x01DA	0xFA8000  	ULNK
0x01DC	0x060000  	RETURN
; end of _isxdigit
_isdigit:
0x0116	0xFA0000  	LNK	#0
;__Lib_CType.c,23 :: 		
;__Lib_CType.c,24 :: 		
0x0118	0xB3C390  	MOV.B	#57, W0
0x011A	0xE15400  	CP.B	W10, W0
0x011C	0x3E0005  	BRA GTU	L_isdigit9
L__isdigit58:
0x011E	0xB3C300  	MOV.B	#48, W0
0x0120	0xE15400  	CP.B	W10, W0
0x0122	0x390002  	BRA LTU	L_isdigit9
L__isdigit59:
0x0124	0xB3C010  	MOV.B	#1, W0
0x0126	0x370001  	BRA	L_isdigit8
L_isdigit9:
0x0128	0xEF2000  	CLR	W0
L_isdigit8:
0x012A	0xFB8000  	ZE	W0, W0
;__Lib_CType.c,25 :: 		
L_end_isdigit:
0x012C	0xFA8000  	ULNK
0x012E	0x060000  	RETURN
; end of _isdigit
_isupper:
0x016E	0xFA0000  	LNK	#0
;__Lib_CType.c,8 :: 		
;__Lib_CType.c,9 :: 		
0x0170	0xB3C5A0  	MOV.B	#90, W0
0x0172	0xE15400  	CP.B	W10, W0
0x0174	0x3E0005  	BRA GTU	L_isupper3
L__isupper49:
0x0176	0xB3C410  	MOV.B	#65, W0
0x0178	0xE15400  	CP.B	W10, W0
0x017A	0x390002  	BRA LTU	L_isupper3
L__isupper50:
0x017C	0xB3C010  	MOV.B	#1, W0
0x017E	0x370001  	BRA	L_isupper2
L_isupper3:
0x0180	0xEF2000  	CLR	W0
L_isupper2:
0x0182	0xFB8000  	ZE	W0, W0
;__Lib_CType.c,10 :: 		
L_end_isupper:
0x0184	0xFA8000  	ULNK
0x0186	0x060000  	RETURN
; end of _isupper
_tolower:
0x0144	0xFA0000  	LNK	#0
;__Lib_CType.c,69 :: 		
;__Lib_CType.c,70 :: 		
0x0146	0xB3C5A0  	MOV.B	#90, W0
0x0148	0xE15400  	CP.B	W10, W0
0x014A	0x3E0007  	BRA GTU	L__tolower41
L__tolower88:
0x014C	0xB3C410  	MOV.B	#65, W0
0x014E	0xE15400  	CP.B	W10, W0
0x0150	0x390004  	BRA LTU	L__tolower40
L__tolower89:
L__tolower39:
;__Lib_CType.c,71 :: 		
0x0152	0xFB808A  	ZE	W10, W1
0x0154	0x200200  	MOV	#32, W0
0x0156	0x708000  	IOR	W1, W0, W0
0x0158	0x784500  	MOV.B	W0, W10
;__Lib_CType.c,70 :: 		
L__tolower41:
L__tolower40:
;__Lib_CType.c,72 :: 		
0x015A	0x78400A  	MOV.B	W10, W0
;__Lib_CType.c,73 :: 		
L_end_tolower:
0x015C	0xFA8000  	ULNK
0x015E	0x060000  	RETURN
; end of _tolower
_EEPROM_Write:
0x02A8	0xFA0000  	LNK	#0
;__Lib_EEPROM_p30.c,147 :: 		
;__Lib_EEPROM_p30.c,150 :: 		
0x02AA	0x07FF5A  	RCALL	_EEPROM_Erase
;__Lib_EEPROM_p30.c,154 :: 		
L_EEPROM_Write0:
0x02AC	0xAEE761  	BTSS	NVMCON, #15
0x02AE	0x370001  	BRA	L_EEPROM_Write1
;__Lib_EEPROM_p30.c,155 :: 		
0x02B0	0x37FFFD  	BRA	L_EEPROM_Write0
L_EEPROM_Write1:
;__Lib_EEPROM_p30.c,158 :: 		
0x02B2	0x200140  	MOV	#lo_addr(W10), W0
0x02B4	0x780490  	MOV	[W0], W9
;__Lib_EEPROM_p30.c,159 :: 		
0x02B6	0xECA000  	INC2	W0
0x02B8	0x780010  	MOV	[W0], W0
0x02BA	0xB7A032  	MOV	WREG, TBLPAG
;__Lib_EEPROM_p30.c,160 :: 		
0x02BC	0x78040C  	MOV	W12, W8
;__Lib_EEPROM_p30.c,162 :: 		
0x02BE	0xBB0C88  	TBLWTL	W8, [W9]
;__Lib_EEPROM_p30.c,163 :: 		
0x02C0	0x240040  	MOV	#16388, W0
0x02C2	0xB7A760  	MOV	WREG, NVMCON
;__Lib_EEPROM_p30.c,166 :: 		
0x02C4	0x07FF1D  	RCALL	__Lib_EEPROM_p30_KeySequence
;__Lib_EEPROM_p30.c,170 :: 		
0x02C6	0xA9C761  	BCLR	NVMCON, #14
;__Lib_EEPROM_p30.c,171 :: 		
L_end_EEPROM_Write:
0x02C8	0xFA8000  	ULNK
0x02CA	0x060000  	RETURN
; end of _EEPROM_Write
_EEPROM_Erase:
0x0160	0xFA0000  	LNK	#0
;__Lib_EEPROM_p30.c,99 :: 		
;__Lib_EEPROM_p30.c,101 :: 		
0x0162	0x781F8C  	PUSH	W12
0x0164	0x24044C  	MOV	#16452, W12
0x0166	0x07FFE4  	RCALL	__Lib_EEPROM_p30_EraseGlobal
;__Lib_EEPROM_p30.c,102 :: 		
L_end_EEPROM_Erase:
0x0168	0x78064F  	POP	W12
0x016A	0xFA8000  	ULNK
0x016C	0x060000  	RETURN
; end of _EEPROM_Erase
__Lib_EEPROM_p30_EraseGlobal:
0x0130	0xFA0000  	LNK	#0
;__Lib_EEPROM_p30.c,69 :: 		
;__Lib_EEPROM_p30.c,70 :: 		
0x0132	0x200140  	MOV	#lo_addr(W10), W0
0x0134	0x883B1A  	MOV	W10, NVMADR
;__Lib_EEPROM_p30.c,71 :: 		
0x0136	0xECA000  	INC2	W0
0x0138	0x780010  	MOV	[W0], W0
0x013A	0xB7A764  	MOV	WREG, NVMADRU
;__Lib_EEPROM_p30.c,73 :: 		
0x013C	0x883B0C  	MOV	W12, NVMCON
;__Lib_EEPROM_p30.c,75 :: 		
0x013E	0x07FFE0  	RCALL	__Lib_EEPROM_p30_KeySequence
;__Lib_EEPROM_p30.c,76 :: 		
L_end_EraseGlobal:
0x0140	0xFA8000  	ULNK
0x0142	0x060000  	RETURN
; end of __Lib_EEPROM_p30_EraseGlobal
__Lib_EEPROM_p30_KeySequence:
0x0100	0xFA0000  	LNK	#0
;__Lib_EEPROM_p30.c,33 :: 		
;__Lib_EEPROM_p30.c,35 :: 		
0x0102	0xFC0005  	DISI	#5
;__Lib_EEPROM_p30.c,36 :: 		
0x0104	0x200559  	MOV	#85, W9
;__Lib_EEPROM_p30.c,37 :: 		
0x0106	0x883B39  	MOV	W9, NVMKEY
;__Lib_EEPROM_p30.c,38 :: 		
0x0108	0x200AA9  	MOV	#170, W9
;__Lib_EEPROM_p30.c,39 :: 		
0x010A	0x883B39  	MOV	W9, NVMKEY
;__Lib_EEPROM_p30.c,40 :: 		
0x010C	0xA8E761  	BSET	NVMCON, #15
;__Lib_EEPROM_p30.c,41 :: 		
0x010E	0x000000  	NOP
;__Lib_EEPROM_p30.c,42 :: 		
0x0110	0x000000  	NOP
;__Lib_EEPROM_p30.c,44 :: 		
L_end_KeySequence:
0x0112	0xFA8000  	ULNK
0x0114	0x060000  	RETURN
; end of __Lib_EEPROM_p30_KeySequence
0x056E	0x20800A  	MOV	#2048, W10
0x0570	0x20000B  	MOV	#0, W11
0x0572	0x090017  	REPEAT	#23
0x0574	0x781D0B  	MOV	W11, [W10++]
0x0576	0x060000  	RETURN
0x0578	0x208001  	MOV	#lo_addr(_FrameIHM), W1
0x057A	0x2854A0  	MOV	#34122, W0
0x057C	0x090011  	REPEAT	#17
0x057E	0x7818B0  	MOV	[W0++], [W1++]
0x0580	0x060000  	RETURN
_UART2_RXINT:
0x03CC	0xF80034  	PUSH	PSVPAG
0x03CE	0xF80036  	PUSH	RCOUNT
0x03D0	0x781F80  	PUSH	W0
0x03D2	0x200020  	MOV	#2, W0
0x03D4	0x09000C  	REPEAT	#12
0x03D6	0x781FB0  	PUSH	[W0++]
;InterruptUART.c,31 :: 		void UART2_RXINT() iv IVT_ADDR_U2RXINTERRUPT ics ICS_AUTO {
;InterruptUART.c,34 :: 		U2RXIF_bit=0;
0x03D8	0xA90087  	BCLR	U2RXIF_bit, BitPos(U2RXIF_bit+0)
;InterruptUART.c,36 :: 		if (UART2_Data_Ready()) {     // If data is received,
0x03DA	0x07FF07  	RCALL	_UART2_Data_Ready
0x03DC	0xE20000  	CP0	W0
0x03DE	0x320001  	BRA Z	L_UART2_RXINT12
L__UART2_RXINT26:
;InterruptUART.c,37 :: 		uart_rd = UART2_Read();     // read the received data,
0x03E0	0x07FEFE  	RCALL	_UART2_Read
;InterruptUART.c,39 :: 		}
L_UART2_RXINT12:
;InterruptUART.c,40 :: 		}
L_end_UART2_RXINT:
0x03E2	0x2001A0  	MOV	#26, W0
0x03E4	0x09000C  	REPEAT	#12
0x03E6	0x78104F  	POP	[W0--]
0x03E8	0x78004F  	POP	W0
0x03EA	0xF90036  	POP	RCOUNT
0x03EC	0xF90034  	POP	PSVPAG
0x03EE	0x064000  	RETFIE
; end of _UART2_RXINT
_UART2_Data_Ready:
0x01EA	0xFA0000  	LNK	#0
;__Lib_UART_12_p30.c,213 :: 		
;__Lib_UART_12_p30.c,214 :: 		
0x01EC	0xBF8218  	MOV	U2STA, WREG
0x01EE	0x600061  	AND	W0, #1, W0
;__Lib_UART_12_p30.c,216 :: 		
L_end_UART2_Data_Ready:
0x01F0	0xFA8000  	ULNK
0x01F2	0x060000  	RETURN
; end of _UART2_Data_Ready
_UART2_Read:
0x01DE	0xFA0000  	LNK	#0
;__Lib_UART_12_p30.c,220 :: 		
;__Lib_UART_12_p30.c,221 :: 		
0x01E0	0x000000  	NOP
;__Lib_UART_12_p30.c,222 :: 		
0x01E2	0x000000  	NOP
;__Lib_UART_12_p30.c,223 :: 		
0x01E4	0xBF821C  	MOV	U2RXREG, WREG
;__Lib_UART_12_p30.c,224 :: 		
L_end_UART2_Read:
0x01E6	0xFA8000  	ULNK
0x01E8	0x060000  	RETURN
; end of _UART2_Read
_Timer4_Interrup:
0x052E	0xF80034  	PUSH	PSVPAG
0x0530	0xF80036  	PUSH	RCOUNT
0x0532	0x781F80  	PUSH	W0
0x0534	0x200020  	MOV	#2, W0
0x0536	0x09000C  	REPEAT	#12
0x0538	0x781FB0  	PUSH	[W0++]
;InterruptTimers.c,17 :: 		void Timer4_Interrup() iv IVT_ADDR_T4INTERRUPT ics ICS_AUTO {
;InterruptTimers.c,18 :: 		T4IF_bit = 0;
0x053A	0xA9A086  	BCLR	T4IF_bit, BitPos(T4IF_bit+0)
;InterruptTimers.c,19 :: 		}
L_end_Timer4_Interrup:
0x053C	0x2001A0  	MOV	#26, W0
0x053E	0x09000C  	REPEAT	#12
0x0540	0x78104F  	POP	[W0--]
0x0542	0x78004F  	POP	W0
0x0544	0xF90036  	POP	RCOUNT
0x0546	0xF90034  	POP	PSVPAG
0x0548	0x064000  	RETFIE
; end of _Timer4_Interrup
_ADC1Int:
0x04FE	0xF80034  	PUSH	PSVPAG
0x0500	0xF80036  	PUSH	RCOUNT
0x0502	0x781F80  	PUSH	W0
0x0504	0x200020  	MOV	#2, W0
0x0506	0x09000C  	REPEAT	#12
0x0508	0x781FB0  	PUSH	[W0++]
;InterruptADC.c,9 :: 		void ADC1Int() org 0x2A {              // ADC interrupt handler
;InterruptADC.c,10 :: 		char ADCTxx=0;
0x050A	0x781F8A  	PUSH	W10
; ADCTxx start address is: 2 (W1)
0x050C	0xEF2002  	CLR	W1
;InterruptADC.c,13 :: 		IFS0.F11 = 0;                          // Clear AD1IF
0x050E	0xA96085  	BCLR	IFS0, #11
;InterruptADC.c,14 :: 		TEST=1;
0x0510	0xA842CA  	BSET	LATB2_bit, BitPos(LATB2_bit+0)
;InterruptADC.c,18 :: 		if ((UART1_Tx_Idle()==1)) UART1_Write(ADCTxx);
0x0512	0x07FEDC  	RCALL	_UART1_Tx_Idle
0x0514	0xE10061  	CP	W0, #1
0x0516	0x3A0002  	BRA NZ	L_ADC1Int0
L__ADC1Int2:
0x0518	0xFB8501  	ZE	W1, W10
; ADCTxx end address is: 2 (W1)
0x051A	0x07FEDE  	RCALL	_UART1_Write
L_ADC1Int0:
;InterruptADC.c,20 :: 		TEST=0;
0x051C	0xA942CA  	BCLR	LATB2_bit, BitPos(LATB2_bit+0)
;InterruptADC.c,21 :: 		}//~
L_end_ADC1Int:
0x051E	0x78054F  	POP	W10
0x0520	0x2001A0  	MOV	#26, W0
0x0522	0x09000C  	REPEAT	#12
0x0524	0x78104F  	POP	[W0--]
0x0526	0x78004F  	POP	W0
0x0528	0xF90036  	POP	RCOUNT
0x052A	0xF90034  	POP	PSVPAG
0x052C	0x064000  	RETFIE
; end of _ADC1Int
_UART1_Tx_Idle:
0x02CC	0xFA0000  	LNK	#0
;__Lib_UART_12_p30.c,117 :: 		
;__Lib_UART_12_p30.c,118 :: 		
0x02CE	0xEF2000  	CLR	W0
0x02D0	0xAF020F  	BTSC	U1STA, #8
0x02D2	0xEC2000  	INC	W0
;__Lib_UART_12_p30.c,119 :: 		
L_end_UART1_Tx_Idle:
0x02D4	0xFA8000  	ULNK
0x02D6	0x060000  	RETURN
; end of _UART1_Tx_Idle
_UART1_Write:
0x02D8	0xFA0000  	LNK	#0
;__Lib_UART_12_p30.c,53 :: 		
;__Lib_UART_12_p30.c,54 :: 		
L_UART1_Write0:
0x02DA	0xAF020F  	BTSC	U1STA, #8
0x02DC	0x370001  	BRA	L_UART1_Write1
0x02DE	0x37FFFD  	BRA	L_UART1_Write0
L_UART1_Write1:
;__Lib_UART_12_p30.c,55 :: 		
0x02E0	0x88108A  	MOV	W10, U1TXREG
;__Lib_UART_12_p30.c,56 :: 		
L_end_UART1_Write:
0x02E2	0xFA8000  	ULNK
0x02E4	0x060000  	RETURN
; end of _UART1_Write
_UART1_RXINT:
0x0324	0xF80034  	PUSH	PSVPAG
0x0326	0xF80036  	PUSH	RCOUNT
0x0328	0x781F80  	PUSH	W0
0x032A	0x200020  	MOV	#2, W0
0x032C	0x09000C  	REPEAT	#12
0x032E	0x781FB0  	PUSH	[W0++]
;InterruptUART.c,3 :: 		void UART1_RXINT() iv IVT_ADDR_U1RXINTERRUPT ics ICS_AUTO {
;InterruptUART.c,6 :: 		U1RXIF_bit=0;
0x0330	0xA92085  	BCLR	U1RXIF_bit, BitPos(U1RXIF_bit+0)
;InterruptUART.c,8 :: 		while (UART1_Data_Ready()) {     // If data is received,
L_UART1_RXINT0:
0x0332	0x07FF60  	RCALL	_UART1_Data_Ready
0x0334	0xE20000  	CP0	W0
0x0336	0x320043  	BRA Z	L_UART1_RXINT1
L__UART1_RXINT18:
;InterruptUART.c,9 :: 		uart_rd = UART1_Read();     // read the received data,
0x0338	0x07FF62  	RCALL	_UART1_Read
; uart_rd start address is: 4 (W2)
0x033A	0x784100  	MOV.B	W0, W2
;InterruptUART.c,11 :: 		if (uart_rd=='*') IndiceFrameIHM=0;
0x033C	0xB3C2A1  	MOV.B	#42, W1
0x033E	0xE10401  	CP.B	W0, W1
0x0340	0x3A0004  	BRA NZ	L_UART1_RXINT2
L__UART1_RXINT19:
0x0342	0x208201  	MOV	#lo_addr(_IndiceFrameIHM), W1
0x0344	0xEF2000  	CLR	W0
0x0346	0x784880  	MOV.B	W0, [W1]
0x0348	0x370003  	BRA	L_UART1_RXINT3
L_UART1_RXINT2:
;InterruptUART.c,12 :: 		else IndiceFrameIHM++;
0x034A	0xB3C011  	MOV.B	#1, W1
0x034C	0x208200  	MOV	#lo_addr(_IndiceFrameIHM), W0
0x034E	0x40C810  	ADD.B	W1, [W0], [W0]
L_UART1_RXINT3:
;InterruptUART.c,14 :: 		if (IndiceFrameIHM<TamanhoFrame) strIHM[IndiceFrameIHM]=uart_rd;
0x0350	0x208200  	MOV	#lo_addr(_IndiceFrameIHM), W0
0x0352	0x784090  	MOV.B	[W0], W1
0x0354	0xB3C0F0  	MOV.B	#15, W0
0x0356	0xE10C00  	CP.B	W1, W0
0x0358	0x310006  	BRA GEU	L_UART1_RXINT4
L__UART1_RXINT20:
0x035A	0x208200  	MOV	#lo_addr(_IndiceFrameIHM), W0
0x035C	0xFB8090  	ZE	[W0], W1
0x035E	0x208100  	MOV	#lo_addr(_strIHM), W0
0x0360	0x400001  	ADD	W0, W1, W0
0x0362	0x784802  	MOV.B	W2, [W0]
0x0364	0x370003  	BRA	L_UART1_RXINT5
L_UART1_RXINT4:
;InterruptUART.c,15 :: 		else IndiceFrameIHM=TamanhoFrame;
0x0366	0x208201  	MOV	#lo_addr(_IndiceFrameIHM), W1
0x0368	0xB3C0F0  	MOV.B	#15, W0
0x036A	0x784880  	MOV.B	W0, [W1]
L_UART1_RXINT5:
;InterruptUART.c,17 :: 		if ((uart_rd=='#')&&(IndiceFrameIHM==TamanhoFrame-1)&&(FlagCommIHM==0)){
0x036C	0xB3C230  	MOV.B	#35, W0
0x036E	0xE11400  	CP.B	W2, W0
0x0370	0x3A0025  	BRA NZ	L__UART1_RXINT16
L__UART1_RXINT21:
; uart_rd end address is: 4 (W2)
0x0372	0x2000F0  	MOV	#15, W0
0x0374	0x5000E1  	SUB	W0, #1, W1
0x0376	0x208200  	MOV	#lo_addr(_IndiceFrameIHM), W0
0x0378	0xFB8010  	ZE	[W0], W0
0x037A	0xE10001  	CP	W0, W1
0x037C	0x3A001F  	BRA NZ	L__UART1_RXINT15
L__UART1_RXINT22:
0x037E	0x208220  	MOV	#lo_addr(_FlagCommIHM), W0
0x0380	0x784010  	MOV.B	[W0], W0
0x0382	0xE10460  	CP.B	W0, #0
0x0384	0x3A001B  	BRA NZ	L__UART1_RXINT14
L__UART1_RXINT23:
L__UART1_RXINT13:
;InterruptUART.c,18 :: 		for (IndiceFrameIHM=0; IndiceFrameIHM<TamanhoFrame;IndiceFrameIHM++){
0x0386	0x208201  	MOV	#lo_addr(_IndiceFrameIHM), W1
0x0388	0xEF2000  	CLR	W0
0x038A	0x784880  	MOV.B	W0, [W1]
L_UART1_RXINT9:
0x038C	0x208200  	MOV	#lo_addr(_IndiceFrameIHM), W0
0x038E	0x784090  	MOV.B	[W0], W1
0x0390	0xB3C0F0  	MOV.B	#15, W0
0x0392	0xE10C00  	CP.B	W1, W0
0x0394	0x31000D  	BRA GEU	L_UART1_RXINT10
L__UART1_RXINT24:
;InterruptUART.c,19 :: 		FrameIHM[IndiceFrameIHM]=strIHM[IndiceFrameIHM];
0x0396	0x208200  	MOV	#lo_addr(_IndiceFrameIHM), W0
0x0398	0xFB8090  	ZE	[W0], W1
0x039A	0x208000  	MOV	#lo_addr(_FrameIHM), W0
0x039C	0x400101  	ADD	W0, W1, W2
0x039E	0x208200  	MOV	#lo_addr(_IndiceFrameIHM), W0
0x03A0	0xFB8090  	ZE	[W0], W1
0x03A2	0x208100  	MOV	#lo_addr(_strIHM), W0
0x03A4	0x400001  	ADD	W0, W1, W0
0x03A6	0x784910  	MOV.B	[W0], [W2]
;InterruptUART.c,18 :: 		for (IndiceFrameIHM=0; IndiceFrameIHM<TamanhoFrame;IndiceFrameIHM++){
0x03A8	0xB3C011  	MOV.B	#1, W1
0x03AA	0x208200  	MOV	#lo_addr(_IndiceFrameIHM), W0
0x03AC	0x40C810  	ADD.B	W1, [W0], [W0]
;InterruptUART.c,20 :: 		}
0x03AE	0x37FFEE  	BRA	L_UART1_RXINT9
L_UART1_RXINT10:
;InterruptUART.c,21 :: 		FrameCompletoUART1=1;
0x03B0	0x208211  	MOV	#lo_addr(_FrameCompletoUART1), W1
0x03B2	0xB3C010  	MOV.B	#1, W0
0x03B4	0x784880  	MOV.B	W0, [W1]
;InterruptUART.c,22 :: 		IndiceFrameIHM=0;
0x03B6	0x208201  	MOV	#lo_addr(_IndiceFrameIHM), W1
0x03B8	0xEF2000  	CLR	W0
0x03BA	0x784880  	MOV.B	W0, [W1]
;InterruptUART.c,17 :: 		if ((uart_rd=='#')&&(IndiceFrameIHM==TamanhoFrame-1)&&(FlagCommIHM==0)){
L__UART1_RXINT16:
L__UART1_RXINT15:
L__UART1_RXINT14:
;InterruptUART.c,24 :: 		}
0x03BC	0x37FFBA  	BRA	L_UART1_RXINT0
L_UART1_RXINT1:
;InterruptUART.c,25 :: 		}
L_end_UART1_RXINT:
0x03BE	0x2001A0  	MOV	#26, W0
0x03C0	0x09000C  	REPEAT	#12
0x03C2	0x78104F  	POP	[W0--]
0x03C4	0x78004F  	POP	W0
0x03C6	0xF90036  	POP	RCOUNT
0x03C8	0xF90034  	POP	PSVPAG
0x03CA	0x064000  	RETFIE
; end of _UART1_RXINT
_UART1_Data_Ready:
0x01F4	0xFA0000  	LNK	#0
;__Lib_UART_12_p30.c,70 :: 		
;__Lib_UART_12_p30.c,71 :: 		
0x01F6	0xBF820E  	MOV	U1STA, WREG
0x01F8	0x600061  	AND	W0, #1, W0
;__Lib_UART_12_p30.c,73 :: 		
L_end_UART1_Data_Ready:
0x01FA	0xFA8000  	ULNK
0x01FC	0x060000  	RETURN
; end of _UART1_Data_Ready
_UART1_Read:
0x01FE	0xFA0000  	LNK	#0
;__Lib_UART_12_p30.c,75 :: 		
;__Lib_UART_12_p30.c,76 :: 		
0x0200	0x000000  	NOP
;__Lib_UART_12_p30.c,77 :: 		
0x0202	0x000000  	NOP
;__Lib_UART_12_p30.c,78 :: 		
0x0204	0xBF8212  	MOV	U1RXREG, WREG
;__Lib_UART_12_p30.c,79 :: 		
L_end_UART1_Read:
0x0206	0xFA8000  	ULNK
0x0208	0x060000  	RETURN
; end of _UART1_Read
_Timer2_Interrup:
0x0306	0xF80034  	PUSH	PSVPAG
0x0308	0xF80036  	PUSH	RCOUNT
0x030A	0x781F80  	PUSH	W0
0x030C	0x200020  	MOV	#2, W0
0x030E	0x09000C  	REPEAT	#12
0x0310	0x781FB0  	PUSH	[W0++]
;InterruptTimers.c,12 :: 		void Timer2_Interrup() iv IVT_ADDR_T2INTERRUPT ics ICS_AUTO {  //250ms
;InterruptTimers.c,13 :: 		T2IF_bit = 0;             // Clear T2IF
0x0312	0xA9C084  	BCLR	T2IF_bit, BitPos(T2IF_bit+0)
;InterruptTimers.c,14 :: 		asm CLRWDT;               // asm line, clear WatchDog Timer
0x0314	0xFE6000  	CLRWDT
;InterruptTimers.c,15 :: 		}
L_end_Timer2_Interrup:
0x0316	0x2001A0  	MOV	#26, W0
0x0318	0x09000C  	REPEAT	#12
0x031A	0x78104F  	POP	[W0--]
0x031C	0x78004F  	POP	W0
0x031E	0xF90036  	POP	RCOUNT
0x0320	0xF90034  	POP	PSVPAG
0x0322	0x064000  	RETFIE
; end of _Timer2_Interrup
_Timer1_Interrup:
0x02E6	0xF80034  	PUSH	PSVPAG
0x02E8	0xF80036  	PUSH	RCOUNT
0x02EA	0x781F80  	PUSH	W0
0x02EC	0x200020  	MOV	#2, W0
0x02EE	0x09000C  	REPEAT	#12
0x02F0	0x781FB0  	PUSH	[W0++]
;InterruptTimers.c,3 :: 		void Timer1_Interrup() iv IVT_ADDR_T1INTERRUPT ics ICS_AUTO {     //TEMPO DE 1ms
;InterruptTimers.c,4 :: 		T1IF_bit = 0;             // Clear T1IF
0x02F2	0xA96084  	BCLR	T1IF_bit, BitPos(T1IF_bit+0)
;InterruptTimers.c,6 :: 		ADCON1.F1  = 1;                        // Start sampling
0x02F4	0xA822A0  	BSET.B	ADCON1, #1
;InterruptTimers.c,7 :: 		ADCON1.F15 = 1;                        // Start conversion
0x02F6	0xA8E2A1  	BSET	ADCON1, #15
;InterruptTimers.c,9 :: 		}
L_end_Timer1_Interrup:
0x02F8	0x2001A0  	MOV	#26, W0
0x02FA	0x09000C  	REPEAT	#12
0x02FC	0x78104F  	POP	[W0--]
0x02FE	0x78004F  	POP	W0
0x0300	0xF90036  	POP	RCOUNT
0x0302	0xF90034  	POP	PSVPAG
0x0304	0x064000  	RETFIE
; end of _Timer1_Interrup
;SensorIrDA2020.c,0 :: ?ICS_FrameIHM [16]
0x054A	0x302A ;?ICS_FrameIHM+0
0x054C	0x3030 ;?ICS_FrameIHM+2
0x054E	0x3030 ;?ICS_FrameIHM+4
0x0550	0x3030 ;?ICS_FrameIHM+6
0x0552	0x3030 ;?ICS_FrameIHM+8
0x0554	0x3030 ;?ICS_FrameIHM+10
0x0556	0x3030 ;?ICS_FrameIHM+12
0x0558	0x0023 ;?ICS_FrameIHM+14
; end of ?ICS_FrameIHM
;SensorIrDA2020.c,0 :: ?ICS_strIHM [16]
0x055A	0x302A ;?ICS_strIHM+0
0x055C	0x3030 ;?ICS_strIHM+2
0x055E	0x3030 ;?ICS_strIHM+4
0x0560	0x3030 ;?ICS_strIHM+6
0x0562	0x3030 ;?ICS_strIHM+8
0x0564	0x3030 ;?ICS_strIHM+10
0x0566	0x3030 ;?ICS_strIHM+12
0x0568	0x0023 ;?ICS_strIHM+14
; end of ?ICS_strIHM
;,0 :: _initBlock_2 [2]
; Containing: ?ICS_IndiceFrameIHM [1]
;             ?ICS_FrameCompletoUART1 [1]
0x056A	0x0000 ;_initBlock_2+0 : ?ICS_IndiceFrameIHM at 0x056A : ?ICS_FrameCompletoUART1 at 0x056B
; end of _initBlock_2
;,0 :: _initBlock_3 [2]
; Containing: ?ICS_FlagCommIHM [1]
;             ?ICS_ADCTx [1]
0x056C	0x3001 ;_initBlock_3+0 : ?ICS_FlagCommIHM at 0x056C : ?ICS_ADCTx at 0x056D
; end of _initBlock_3
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0100      [22]    __Lib_EEPROM_p30_KeySequence
0x0116      [26]    _isdigit
0x0130      [20]    __Lib_EEPROM_p30_EraseGlobal
0x0144      [28]    _tolower
0x0160      [14]    _EEPROM_Erase
0x016E      [26]    _isupper
0x0188      [32]    _isspace
0x01A8      [54]    _isxdigit
0x01DE      [12]    _UART2_Read
0x01EA      [10]    _UART2_Data_Ready
0x01F4      [10]    _UART1_Data_Ready
0x01FE      [12]    _UART1_Read
0x020A     [158]    _xtoi
0x02A8      [36]    _EEPROM_Write
0x02CC      [12]    _UART1_Tx_Idle
0x02D8      [14]    _UART1_Write
0x02E6      [32]    _Timer1_Interrup
0x0306      [30]    _Timer2_Interrup
0x0324     [168]    _UART1_RXINT
0x03CC      [36]    _UART2_RXINT
0x03F0     [270]    _main
0x04FE      [48]    _ADC1Int
0x052E      [28]    _Timer4_Interrup
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0824       [2]    _eedata
0x0826       [6]    _strHex
0x082C       [4]    _eeAddr
0x0760       [0]    WR_bit
0x0760       [2]    NVMCON
0x0764       [2]    NVMADRU
0x0762       [2]    NVMADR
0x02CC       [2]    TRISC
0x02DE       [2]    TRISF
0x02C0       [2]    TRISA
0x0210       [2]    U1TXREG
0x020E       [2]    U1STA
0x0280       [2]    ADCBUF0
0x0084       [0]    U1RXIF_bit
0x0212       [2]    U1RXREG
0x0086       [0]    U2RXIF_bit
0x0032       [2]    TBLPAG
0x0766       [2]    NVMKEY
0x021C       [2]    U2RXREG
0x02CA       [0]    LATB2_bit
0x02CA       [0]    TEST
0x0218       [2]    U2STA
0x0088       [2]    IFS2
0x0086       [2]    IFS1
0x0084       [2]    IFS0
0x0080       [2]    INTCON1
0x0094       [2]    IPC0
0x008C       [2]    IEC0
0x0082       [2]    INTCON2
0x02A2       [2]    ADCON2
0x02A0       [2]    ADCON1
0x02C6       [2]    TRISB
0x02A4       [2]    ADCON3
0x02AA       [2]    ADCSSL
0x02A6       [2]    ADCHS
0x02A8       [2]    ADPCFG
0x011A       [2]    PR4
0x008C       [0]    T2IE_bit
0x0084       [0]    T2IF_bit
0x011E       [2]    T4CON
0x02D2       [2]    TRISD
0x008E       [0]    T4IE_bit
0x0086       [0]    T4IF_bit
0x0104       [2]    T1CON
0x0102       [2]    PR1
0x0098       [2]    IPC2
0x0084       [0]    T1IF_bit
0x0110       [2]    T2CON
0x010C       [2]    PR2
0x008C       [0]    T1IE_bit
0x0800      [16]    _FrameIHM
0x0810      [16]    _strIHM
0x0820       [1]    _IndiceFrameIHM
0x0821       [1]    _FrameCompletoUART1
0x0822       [1]    _FlagCommIHM
0x0823       [1]    _ADCTx
0x0032       [2]    TBLPAG
0x0080       [2]    INTCON1
0x0082       [2]    INTCON2
0x0084       [2]    IFS0
0x0086       [2]    IFS1
0x0088       [2]    IFS2
0x008C       [2]    IEC0
0x0094       [2]    IPC0
0x0098       [2]    IPC2
0x0102       [2]    PR1
0x0104       [2]    T1CON
0x010C       [2]    PR2
0x0110       [2]    T2CON
0x0014       [1]    FARG_isdigit_character
0x011A       [2]    PR4
0x011E       [2]    T4CON
0x0014       [4]    FARG___Lib_EEPROM_p30_EraseGlobal_address
0x0018       [2]    FARG___Lib_EEPROM_p30_EraseGlobal_nvmcon_data
0x0014       [1]    FARG_tolower_character
0x0014       [4]    FARG_EEPROM_Erase_address
0x0014       [1]    FARG_isupper_character
0x0014       [1]    FARG_isspace_character
0x0014       [1]    FARG_isxdigit_character
0x0014       [2]    FARG_xtoi_s
0x020E       [2]    U1STA
0x0210       [2]    U1TXREG
0x0212       [2]    U1RXREG
0x0218       [2]    U2STA
0x021C       [2]    U2RXREG
0x0280       [2]    ADCBUF0
0x02A0       [2]    ADCON1
0x02A2       [2]    ADCON2
0x02A4       [2]    ADCON3
0x02A6       [2]    ADCHS
0x0014       [4]    FARG_EEPROM_Write_address
0x0018       [2]    FARG_EEPROM_Write_data_
0x02A8       [2]    ADPCFG
0x02AA       [2]    ADCSSL
0x02C0       [2]    TRISA
0x02C6       [2]    TRISB
0x02CC       [2]    TRISC
0x02D2       [2]    TRISD
0x0014       [2]    FARG_UART1_Write__data
0x02DE       [2]    TRISF
0x0760       [2]    NVMCON
0x0762       [2]    NVMADR
0x0764       [2]    NVMADRU
0x0766       [2]    NVMKEY
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x054A      [16]    ?ICS_FrameIHM
0x055A      [16]    ?ICS_strIHM
0x056A       [1]    ?ICS_IndiceFrameIHM
0x056B       [1]    ?ICS_FrameCompletoUART1
0x056C       [1]    ?ICS_FlagCommIHM
0x056D       [1]    ?ICS_ADCTx
